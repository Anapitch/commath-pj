{"version":3,"sources":["views/Main.js","views/Number1.js","views/Number2.js","views/Number3.js","views/Number4.js","views/Number5.js","views/Number6.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Main","navigate","useNavigate","nextPage","page","onClick","Number1","Number2","Number3","Number4","Number5","Number6","routes","path","element","App","router","useRoutes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAwCeA,MAnCf,WACE,IAAMC,EAAWC,cAEXC,EAAW,SAACC,GAChBH,EAAS,IAAIG,IAEf,OACE,6BACI,4BAAQC,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,2CChCG,SAASG,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCKR,IAkCeC,EAlCA,CAAC,CACRC,KAAM,IACNC,QAAS,kBAAE,EAAF,OAEb,CACID,KAAM,cACNC,QAAS,kBAAE,EAAF,OAEb,CACID,KAAM,UACNC,QAAS,kBAAER,EAAF,OAEb,CACIO,KAAM,UACNC,QAAS,kBAAEP,EAAF,OAEb,CACIM,KAAM,UACNC,QAAS,kBAAEN,EAAF,OAEb,CACIK,KAAM,UACNC,QAAS,kBAAEL,EAAF,OAEb,CACII,KAAM,UACNC,QAAS,kBAAEJ,EAAF,OAEb,CACIG,KAAM,UACNC,QAAS,kBAAEH,EAAF,QC7BFI,EALH,WACR,IAAMC,EAASC,YAAUL,GACzB,OAAO,iCAASI,EAAT,M,OCKSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAQ,kBACb,IADa,KAEb,kBACA,EADA,OAIAC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3f8819fd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction Main() {\r\n  const navigate = useNavigate();\r\n\r\n  const nextPage = (page) => {\r\n    navigate(\"/\"+page);\r\n  }\r\n  return (\r\n    <div>\r\n        <button onClick={()=>{nextPage(\"Number1\")}}>\r\n            <h3>Number 1</h3>\r\n        </button>\r\n        <br/>\r\n        <button onClick={()=>{nextPage(\"Number2\")}} >\r\n            <h3>Number 2</h3>\r\n        </button>\r\n        <br/>\r\n        <button onClick={()=>{nextPage(\"Number3\")}} >\r\n            <h3>Number 3</h3>\r\n        </button>\r\n        <br/>\r\n        <button onClick={()=>{nextPage(\"Number4\")}} >\r\n            <h3>Number 4</h3>\r\n        </button>\r\n        <br/>\r\n        <button onClick={()=>{nextPage(\"Number5\")}} >\r\n            <h3>Number 5</h3>\r\n        </button>\r\n        <br/>\r\n        <button onClick={()=>{nextPage(\"Number6\")}} >\r\n            <h3>Number 6</h3>\r\n        </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\n\r\nexport default function Number1() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Number2() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Number3() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Number4() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Number5() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Number6() {\r\n    return (\r\n        <h1>Hello World!</h1>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Main from \"./views/Main\";\r\nimport Number1 from \"./views/Number1\";\r\nimport Number2 from \"./views/Number2\";\r\nimport Number3 from \"./views/Number3\";\r\nimport Number4 from \"./views/Number4\";\r\nimport Number5 from \"./views/Number5\";\r\nimport Number6 from \"./views/Number6\";\r\n\r\nconst routes = [{\r\n        path: \"/\",\r\n        element: < Main / > ,\r\n    },\r\n    {\r\n        path: \"/commath-pj\",\r\n        element: < Main / > ,\r\n    },\r\n    {\r\n        path: \"Number1\",\r\n        element: < Number1 / > ,\r\n    },\r\n    {\r\n        path: \"Number2\",\r\n        element: < Number2 / > ,\r\n    },\r\n    {\r\n        path: \"Number3\",\r\n        element: < Number3 / > ,\r\n    },\r\n    {\r\n        path: \"Number4\",\r\n        element: < Number4 / > ,\r\n    },\r\n    {\r\n        path: \"Number5\",\r\n        element: < Number5 / > ,\r\n    },\r\n    {\r\n        path: \"Number6\",\r\n        element: < Number6 / > ,\r\n    },\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport './App.css';\r\nimport routes from \"./routes\";\r\nimport { useRoutes } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n    const router = useRoutes(routes);\r\n    return <div > { router } < /div>;\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render( <\r\n    BrowserRouter >\r\n    <\r\n    App / >\r\n    <\r\n    /BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}